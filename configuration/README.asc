# Configuring Micorservices

This lab will look at the various approaches to configuring a Spring based application.

== Spring Framework
We'll start with the http://spring.io/projects/spring-framework[Spring Framework], which provides the `Environment` abstraction, a concept of _profiles_ and the `@PropertySource` annotation.

You can see them in action in the `basics` module.

* the Spring `Environment` abstraction provides a way to let Spring ask questions about their environment. You can see it working in `basics/src/main/java/boot/env/Application.java`. It's a little bit of indirection between a running Spring app and it's environment. It provides a way to read configuration values from the environment and property values from _property sources_.

== Spring Boot

Spring Boot provides next-level support for configuration. Spring Boot normalizes external configuration (like `-D` arguments and environment variables) and even goes as far as canonicalizing external  configuration properties such that, for example, the shell variable `SERVER_PORT` is the same as `-Dserver.port`, which is the same as putting `server.port` in a `.properties` file. Spring Boot also adds novel support for `.yml` configuration files. Spring Boot will, by convention, look for `src/main/resources/application.properties` and `src/main/resources/application.yml`, too.

 * you can see it working in the `basics/src/main/java/boot/Application.java`.

== Spring Cloud
Then, we look at how Spring Cloud supports cloud-native applications and operational requirements by supporting journaled, centralized configuration for multiple applications and services through the Spring Cloud config server. The Spring Cloud config server is backed by a http://en.wikipedia.org/wiki/Git_%28software%29[Git]. This promotes traceability and easier updates to configuration since there's no need to re-push an application just to change its configuration. Additionally, Spring Cloud supports _refreshing_ configuration for beans _in-situ_ through the `/refresh` Actuator endpoint and through the Spring Cloud event bus (which uses RabbitMQ as a message bus to propagate configuration changes to all connected applications or services).

 * you can see it working in the `config-client` and `config-server` modules.
 * Start the `config-server` first. It will proxy configuration from a Git repository and make it available to other services that have the `org.springframework.cloud:spring-cloud-config-client` on their CLASSPATH.
 * you can see that working in the `config-client` where we depend on configuration. 
