= Service Registration & Discovery


This section of the lab looks at how using a service registry (like Netflix's Eureka) can decouple services. It's easiest to think of Eureka as a phone-book or a directory for your services: as they spin up and claim a host and port, they register themselves with the directory and any service that wants to _discover_ or route to them need  only ask the directory.

If a given service is _not_ listed in the directory then a client is at least empowered to react accordingly instead of blindly attempting a service-to-service call.

Services may also handle their own routing and load-balancing if they have the ability to ask questions about the state and topology of the system. After all, a client knows best what priorities should be applied to its requests and its also better positioned to change those priorities as needed. If a client can ask questions about the topology of the system, it can react to changes in that topology accordingly.  

==
We'll start with a look at the  http://spring.io/projects/spring-framework[Spring Framework], which provides the `Environment` abstraction and a concept of _profiles_ and the `@PropertySource` annotation.

The `Environment` abstraction is a Spring application's gateway to the environment around it. Inject it in any object and then use it to ask questions like "what profiles are active" and "what's the value for this property?"  A property, in this case, refers to a key and a value. Spring can read properties from any `PropertySource` in a chain of  configured `PropertySource` instances.

== Spring Boot


Then, it looks at how Spring Boot's next-level support for configuration.  Spring Boot normalizes external configuration (like `-D` arguments and environment variables) and even goes as far as canonicalizing external  configuration properties such that, for example, the shell variable `SERVER_PORT` is the same as `-Dserver.port`, which is the same as putting `server.port` in a `.properties` file. Spring Boot also adds novel support for `.yml` configuration files. Spring Boot will, by convention, look for `src/main/resources/application.properties` and `src/main/resources/application.yml`, too.

== Spring Cloud
Then, we look at how Spring Cloud supports cloud-native applications and operational requirements by supporting journaled, centralized configuration for multiple applications and services through the Spring Cloud config server. The Spring Cloud config server is backed by a http://en.wikipedia.org/wiki/Git_%28software%29[Git]. This promotes traceability and easier updates to configuration since there's no need to re-push an application just to change its configuration. Additionally, Spring Cloud supports _refreshing_ configuration for beans _in-situ_ through the `/refresh` Actuator endpoint and through the Spring Cloud event bus (which uses RabbitMQ as a message bus to propagate configuration changes to all connected applications or services).
